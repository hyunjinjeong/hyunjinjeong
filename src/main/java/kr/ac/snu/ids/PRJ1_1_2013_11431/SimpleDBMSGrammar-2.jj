options
{
  IGNORE_CASE = true;
}

PARSER_BEGIN(SimpleDBMSParser)
package kr.ac.snu.ids.PRJ1_1_2013_11431;

import java.util.ArrayList;

public class SimpleDBMSParser
{
  private static Schema schema;
  
  public static void main(String args[]) throws ParseException
  {
    // Load a schema instance.
    schema = Schema.getSchema();
    
    // Project 1-1 Parser
    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);
    Message.printPrompt();
    
    while (true)
    {
      try
      {
        parser.command();
      }
      catch (ParseException e)
      {
        String msg;
        if (e.currentToken != null) {
          msg = Message.getMessage(Message.SYNTAX_ERROR);
        }
        else {
          msg = e.getMessage();
        }
        Message.print(msg);
        SimpleDBMSParser.ReInit(System.in);
        Message.printPrompt();
      }
    }
  }
}

PARSER_END(SimpleDBMSParser)
 

SKIP : { < SPACE: " " > | <  TAB : "\t" > | < EOL : "\r\n" | "\n" | "\r" > }

/*
   According to the JavaCC's FAQ page (https://javacc.github.io/javacc/faq.html#question-3.3),
   there are three rules to identify the next token.
   1. The regular expression must describe a prefix of the remaining input stream.
   2. If more than one regular expression describes a prefix,
      then a regular expression that describes the longest prefix of the input stream is used
      (this is called the maximal munch rule).
   3. If more than one regular expression describes the longest possible prefix,
      then the regular expression that comes first in the .jj file is used.

      That is, the earlier the tokens are declared, the higher their priority is.
      Therefore, Keywords Tokens must be declared before LEGAL_IDENTIFIER in case of conflict.
*/


/*
   Keyword Tokens: The two-word tokens have been separated into the two tokens of one word.
*/
TOKEN :
{
  < EXIT : "exit" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < CREATE : "create" >
| < DROP : "drop" >
| < SHOW : "show" >
| < DESC : "desc" >
| < SELECT : "select" >
| < INSERT : "insert" >
| < DELETE : "delete" >
| < TABLE : "table" >
| < TABLES : "tables" >
| < NULL : "null" >
| < PRIMARY : "primary" >
| < FOREIGN : "foreign" >
| < KEY : "key" >
| < REFERENCES : "references" >
| < AS : "as" >
| < FROM : "from" >
| < WHERE : "where" >
| < OR : "or" >
| < AND : "and" >
| < NOT : "not" >
| < IS : "is" >
| < INTO : "into" >
| < VALUES : "values" >
}   


/*
   Normal tokens
*/
TOKEN :
{
  < END : < SEMICOLON > (< SPACE > | < TAB >)* < EOL > > 
| < SEMICOLON : ";" >
| < ASTERISK : "*" >
| < LEFT_PAREN : "(">
| < RIGHT_PAREN : ")">
| < COMMA : ",">
| < DOT : ".">
| < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >
| < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > >
| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > >
| < OPERATOR : "<=" | ">=" | "!=" | "<" | ">" | "=" >
| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >
| < #SIGN : "+" | "-" >  
| < #DIGIT : [ "0"-"9" ] >
| < #NNNN : < DIGIT > < DIGIT > < DIGIT > < DIGIT > >
| < #NN : < DIGIT > < DIGIT > >
| < #ALPHABET : [ "a"-"z", "A"-"Z" ] >
| < #UNDERSCORE : "_" >
| < #QUOTE : "'" > 
| < #NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET > | < NON_QUOTE_SPECIAL_CHARACTERS > | " " >
| < #NON_QUOTE_SPECIAL_CHARACTERS : "!" | "@" | "#" | "$" | "%" | "^" | "&" | "-" | "{" | "}"
    | "[" | "]" | "~" | "`" | "+" | "*" | "_" | "=" | "\\" | "(" | ")" | "<" | ">" | "?" | "," | "."  
    | "\n" | "\t" | "\r" | ":" | ";" | "|" | "/" >
| < UNEXPECTED: ~[] >
}


void command() :
{}
{
  queryList()
| (
    (
      < EXIT >
      (
        < SEMICOLON > | < END >
      )
    )
  | < EOF >
  )
  {
    // Close DB
    schema.closeDatabase();
    System.exit(0);
  }
}

void queryList() :
{}
{
  (
    query()
  )+
}

void query() :
{}
{
  createTableQuery()
| dropTableQuery()
| descQuery()
| showTablesQuery()
| insertQuery()
| deleteQuery()
| selectQuery()
}

/*
   CREATE TABLE START
*/
void createTableQuery() :
{
  String msg;
  String name;
  Table table = new Table();
}
{
  < CREATE >
  < TABLE >
  name = tableName()
  {
    table.setName(name);
  }
  tableElementList(table)
  (
    < END >
    {
      schema.createTable(table);
      msg = Message.getMessage(Message.CREATE_TABLE_SUCCESS, name);
      Message.print(msg);
      Message.printPrompt();
    }
  | < SEMICOLON >
    {
      schema.createTable(table);
      msg = Message.getMessage(Message.CREATE_TABLE_SUCCESS, name);
      Message.print(msg);
    }  )
}

void tableElementList(Table t) :
{}
{
  < LEFT_PAREN >
  tableElement(t)
  (
    < COMMA >
    tableElement(t)
  )*
  < RIGHT_PAREN >
}

void tableElement(Table t) :
{}
{
  columnDefinition(t)
| tableConstraintDefinition(t)
}

void columnDefinition(Table t) :
{
  String name;
  Type type;
  Column c = new Column();
}
{
  name = columnName()
  {
    c.setName(name);
  }
  type = dataType()
  {
    c.setType(type);
  }
  (
    < NOT >
    < NULL >
    {
      c.setNotNull();
    }
  )?
  {
    schema.addColumn(t, c);
  }
}

void tableConstraintDefinition(Table t) :
{}
{
  primaryKeyConstraint(t)
| referentialConstraint(t)
}

void primaryKeyConstraint(Table t) :
{
  ArrayList<String> columnNameList;
}
{
  < PRIMARY >
  < KEY >
  columnNameList = columnNameList()
  {
    schema.addPrimaryKeys(t, columnNameList);
  }
}

void referentialConstraint(Table t) :
{
  ArrayList<String> referencing;
  ArrayList<String> referenced;
  String tableName;
}
{
  < FOREIGN >
  < KEY >
  referencing = columnNameList()
  < REFERENCES >
  tableName = tableName()
  referenced = columnNameList()
  {
    schema.addForeignKeys(referencing, referenced, t, tableName);
  }
}

ArrayList<String> columnNameList() :
{
  String name;
  ArrayList<String> columnList;
}
{
  {
    columnList = new ArrayList<String>();
  }
  < LEFT_PAREN >
  name = columnName()
  {
    columnList.add(name);
  }
  (
    < COMMA >
    name = columnName()
    {
      columnList.add(name);
    }
  )*
  < RIGHT_PAREN >
  {
    return columnList;
  }
}

Type dataType() :
{
  Type type;
  Token lengthToken;
  int intLength;
}
{
  (
    < INT >
    {
      type = schema.getType(Type.IntType);
    }
  | (
      < CHAR >
      < LEFT_PAREN >
      lengthToken = < INT_VALUE >
      < RIGHT_PAREN >
    )
    {
      intLength = Integer.parseInt(lengthToken.image);
      type = schema.getType(Type.CharType, intLength); 
    }
  | < DATE >
    {
      type = schema.getType(Type.DateType);
    }
  )
  {
    return type;
  }
}

String tableName() :
{}
{
  < LEGAL_IDENTIFIER >
  {
    return token.image.toLowerCase();
  }
}

String columnName() :
{}
{
  < LEGAL_IDENTIFIER >
  {
    return token.image.toLowerCase();
  }
}
/*
   CREATE TABLE END
*/

/*
   DROP TABLE / DESC / SHOW TABLES START
*/
void dropTableQuery() :
{
  String msg;
  String name;
}
{
  < DROP >
  < TABLE >
  name = tableName()
  (
    < END >
    {
      schema.dropTable(name);
      msg = Message.getMessage(Message.DROP_SUCCESS, name);
      Message.print(msg);
      Message.printPrompt();
    }
  | < SEMICOLON >
    {
      schema.dropTable(name);
      msg = Message.getMessage(Message.DROP_SUCCESS, name);
      Message.print(msg);
    }  )
}

void descQuery() :
{
  String msg;
  String name;
}
{
  < DESC >
  name = tableName()
  (
    < END >
    {
      msg = schema.desc(name);
      Message.print(msg);
      Message.printPrompt();
    }
  | < SEMICOLON >
    {
      msg = schema.desc(name);
      Message.print(msg);
    }  )
}

void showTablesQuery() :
{
  String msg;
}
{
  < SHOW >
  < TABLES >
  (
    < END >
    {
      msg = schema.showTables();
      Message.print(msg);
      Message.printPrompt();
    }
  | < SEMICOLON >
    {
      msg = schema.showTables();
      Message.print(msg);
    }  )
}
/*
   DROP TABLE / DESC / SHOW TABLES END
*/

/*
   SELECT START
*/
void selectQuery() :
{
  String msg;
}
{
  < SELECT >
  selectList()
  tableExpression()
  (
    < END >
    {
      msg = Message.getMessage(Message.SELECT);
      Message.print(msg);
      Message.printPrompt();
    }
  | < SEMICOLON >
    {
      msg = Message.getMessage(Message.SELECT);
      Message.print(msg);
    }  )
}

void selectList() :
{}
{
  < ASTERISK >
| (
    selectedColumn()
    (
      < COMMA >
      selectedColumn()
    )*
  )
}

void selectedColumn() :
{}
{
  columnInTable()
  (
    < AS >
    columnName()
  )?
}

void period() :
{}
{
  < DOT >
}

/*
   Make a new term for duplicate expressions.
   < COLUMN IN TABLE > ::= [< TABLE NAME > < PERIOD >] < COLUMN NAME >
*/ 
ColumnInTable columnInTable() :
{
  ColumnInTable c = new ColumnInTable();
  String tName;
  String cName;
  Column column;
}
{
  (
    /*
       A lookahead of 2 is used here because both < TABLE NAME > and < COLUMN NAME > are < LEGAL IDENTIFIER >.
    */
    LOOKAHEAD(2)
    tName = tableName()
    {
      c.setTableName(tName);
    }
    period()
  )?
  cName = columnName()
  {
    c.setColumnName(cName);
    return c;
  }
}

void tableExpression() :
{}
{
  fromClause()
  (
    whereClause()
  )?
}

void fromClause() :
{}
{
  < FROM >
  tableReferenceList()
}

void tableReferenceList() :
{}
{
  referedTable()
  (
    < COMMA >
    referedTable()
  )*
}

void referedTable() :
{}
{
  tableName()
  (
    < AS >
    tableName()
  )?
}

Where.BooleanValueExpression whereClause() :
{
  Where.BooleanValueExpression bve;
}
{
  < WHERE >
  bve = booleanValueExpression()
  {
    return bve;
  }
}

Where.BooleanValueExpression booleanValueExpression() :
{
  Where.BooleanValueExpression bve = new Where.BooleanValueExpression();
  Where.BooleanTerm bt;
}
{
  bt = booleanTerm()
  {
    bve.addBooleanTerm(bt);
  }
  (
    < OR >
    bt = booleanTerm()
    {
      bve.addBooleanTerm(bt);
    }
  )*
  {
    return bve;
  }
}

Where.BooleanTerm booleanTerm() :
{
  Where.BooleanTerm bt = new Where.BooleanTerm();
  Where.BooleanFactor bf;
}
{
  bf = booleanFactor()
  {
    bt.addBooleanFactor(bf);
  }
  (
    < AND >
    bf = booleanFactor()
    {
      bt.addBooleanFactor(bf);
    }
  )*
  {
    return bt;
  }
}

Where.BooleanFactor booleanFactor() :
{
  Where.BooleanFactor bf = new Where.BooleanFactor();
  Where.BooleanTest bt;
}
{
  (
    < NOT >
    {
      bf.setIsNot();
    }
  )?
  bt = booleanTest()
  {
    bf.setBooleanTest(bt);
    return bf;
  }
}

Where.BooleanTest booleanTest() :
{
  Where.BooleanTest bt;
}
{
  (
    bt = predicate()
  | bt = parenthesizedBooleanExpression()
  )
  {
    return bt;
  }
}

Where.ParenthesizedBooleanValueExpression parenthesizedBooleanExpression() :
{
  Where.ParenthesizedBooleanValueExpression pbve = new Where.ParenthesizedBooleanValueExpression();
  Where.BooleanValueExpression bve;
}
{
  < LEFT_PAREN >
  bve = booleanValueExpression()
  {
    pbve.setBooleanValueExpression(bve);
  }
  < RIGHT_PAREN >
  {
    return pbve;
  }
}

Where.Predicate predicate() :
{
  Where.Predicate p;
}
{
  /*
     comparisonPredicate() can be 'columnInTable() compOp() ...' and
     nullPredicate() can also become 'columnInTable() nullOperation()'. 
     Since the maximum number of tokens in columnInTable() is three,
     four tokens should be lookaheaded to determine which tokens are consumed.
     But a lookahead of 4 makes the parser much slower, so I have rewritten the grammar as below.
     <PREDICATE> ::= <COLUMN IN TABLE PREDICATE> | <COMPARABLE VALUE PREDICATE>
     <COLUMN IN TABLE PREDICATE> ::= <COLUMN IN TABLE> (<COMP OP> <COMP OPERAND> | <NULL OPERATION>)
     <COMPARABLE VALUE PREDICATE> ::= <COMPARABLE VALUE> <COMP OP> <COMP OPERAND>    
  */
  (
    p = columnInTablePredicate()
  | p = comparableValuePredicate()
  )
  {
    return p;
  }
}

Where.ColumnInTablePredicate columnInTablePredicate() :
{
  Where.ColumnInTablePredicate citp = new Where.ColumnInTablePredicate();
  ColumnInTable cit;
  String op;
  Where.CompOperand cp;
  boolean isNullOperation;
}
{
  cit = columnInTable()
  {
    citp.setLeft(cit);
  }
  (
    (
      op = compOp()
      cp = compOperand()
      {
        citp.setOp(op);
        citp.setRight(cp);
      }
    )
    |
    (
      nullOperation(citp)
      {
        citp.setNullOperation();
      }
    )
  )
  {
    return citp;
  }
}

Where.ComparableValuePredicate comparableValuePredicate() :
{
  Where.ComparableValuePredicate cvp = new Where.ComparableValuePredicate();
  Value left;
  String op;
  Where.CompOperand cp;
}
{
  left = comparableValue()
  {
    cvp.setLeft(left);
  }
  op = compOp()
  {
    cvp.setOp(op);
  }
  cp = compOperand()
  {
    cvp.setRight(cp);
    return cvp;
  }
}

Where.CompOperand compOperand() :
{
  Value v;
  ColumnInTable ct;
}
{
  v = comparableValue()
  {
    return v;
  }
| ct = columnInTable()
  {
    return ct;
  }
}

String compOp() :
{}
{
  < OPERATOR >
  {
    return token.image;
  }
}

Value comparableValue() :
{
  Value v;
}
{
  < INT_VALUE >
  {
    v = new Value(new Type(Type.IntType), Integer.parseInt(token.image));
    return v;
  }
| < CHAR_STRING >
  {
    String val = token.image.substring(1, token.image.length()-1);
    v = new Value(new Type(Type.CharType), val);
    return v;
  }
| < DATE_VALUE >
  {
    v = new Value(new Type(Type.DateType), token.image);
    return v;
  }
}

void nullOperation(Where.ColumnInTablePredicate citp) :
{}
{
  < IS >
  (
    < NOT >
    {
      citp.setIsNot();
    }
  )?
  < NULL >
}
/*
   SELECT END
*/

/*
   INSERT / DELETE START
*/
void insertQuery() :
{
  String msg;
  String tableName;
  Pair<ArrayList<String>, ArrayList<Value>> columnsAndValues;
}
{
  < INSERT >
  < INTO >
  tableName = tableName()
  columnsAndValues = insertColumnAndSource()
  (
    < END >
    {
      schema.insertRecord(tableName, columnsAndValues.first(), columnsAndValues.second());
      msg = Message.getMessage(Message.INSERT_RESULT);
      Message.print(msg);
      Message.printPrompt();
    }
  | < SEMICOLON >
    {
      schema.insertRecord(tableName, columnsAndValues.first(), columnsAndValues.second());
      msg = Message.getMessage(Message.INSERT_RESULT);
      Message.print(msg);
    }
  )
}

Pair<ArrayList<String>, ArrayList<Value>> insertColumnAndSource() :
{
  ArrayList<String> columnNames = new ArrayList<String>();
  ArrayList<Value> values;
}
{
  (
    columnNames = columnNameList()
  )?
  values = valueList()
  {
    return new Pair(columnNames, values);
  }
}

ArrayList<Value> valueList() :
{
  Value v;
  ArrayList<Value> values = new ArrayList<Value>();
}
{
  < VALUES >
  < LEFT_PAREN >
  v = value()
  {
    values.add(v);
  }
  (
    < COMMA >
    v = value()
    {
      values.add(v);
    }
  )*
  < RIGHT_PAREN >
  {
    return values;
  }
}

Value value() :
{
  Value v;
}
{
  (
    < NULL >
    {
      v = new Value(new Type(Type.NullType));
    }
  | v = comparableValue()
  )
  {
    return v;
  }
}

void deleteQuery() :
{
  String msg;
  Pair<Integer, Integer> result;
  int deleteCnt;
  int failCnt;
  String tableName;
  Where.BooleanValueExpression bve = null;
}
{
  < DELETE >
  < FROM >
  tableName = tableName()
  (
    bve = whereClause()
  )?
  (
    < END >
    {
      result = schema.deleteRecord(tableName, bve);
      deleteCnt = result.first();
      failCnt = result.second();
      msg = Message.getMessage(Message.DELETE_RESULT, deleteCnt);
      Message.print(msg);
      if (failCnt > 0) {
        msg = Message.getMessage(Message.DELETE_REFERENTIAL_INTEGRITY_PASSED, failCnt);
        Message.print(msg);
      }
      Message.printPrompt();
    }
  | < SEMICOLON >
    {
      result = schema.deleteRecord(tableName, bve);
      deleteCnt = result.first();
      failCnt = result.second();
      msg = Message.getMessage(Message.DELETE_RESULT, deleteCnt);
      Message.print(msg);
      if (failCnt > 0) {
        msg = Message.getMessage(Message.DELETE_REFERENTIAL_INTEGRITY_PASSED, failCnt);
        Message.print(msg);
      }
    }  )
}
/*
   INSERT / DELETE END
*/